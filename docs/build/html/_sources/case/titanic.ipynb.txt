{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Titanic存活预测\n",
    "\n",
    "**目录**\n",
    "\n",
    "1. [概述](#概述)\n",
    "2. [数据分析](#数据分析)\n",
    "3. [数据清洗](#数据清洗)\n",
    "4. [baseline建模及评估](#baseline建模及评估) \n",
    "5. [误差分析](#误差分析)\n",
    "6. [进一步特征工程](#进一步特征工程)\n",
    "7. [模型调优及融合](#模型调优及融合)\n",
    "8. [总结](#总结)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 概述<a id='概述'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Titanic存活预测是Kaggle上的入门赛题。给定一些乘客的信息，及其最后是否存活的label，作为训练样本,预测其他乘客是否存活，是典型的二分类问题。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. 数据分析<a id='数据分析'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "首先导入数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import warnings\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')\n",
    "all_data = pd.concat([train,test],keys = ['train','test'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "891 418\n"
     ]
    }
   ],
   "source": [
    "print(train.shape[0],test.shape[0]) #训练集891条，测试集418条"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3838383838383838"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Survived'].mean() #平均存活率38.4%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Missing Data\n",
    "年龄与舱位的数据缺失比较严重"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>263</td>\n",
       "      <td>0.200917</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>1014</td>\n",
       "      <td>0.774637</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>2</td>\n",
       "      <td>0.001528</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000764</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total   Percent     Type\n",
       "Age            263  0.200917  float64\n",
       "Cabin         1014  0.774637   object\n",
       "Embarked         2  0.001528   object\n",
       "Fare             1  0.000764  float64\n",
       "Name             0  0.000000   object\n",
       "Parch            0  0.000000    int64\n",
       "PassengerId      0  0.000000    int64\n",
       "Pclass           0  0.000000    int64\n",
       "Sex              0  0.000000   object\n",
       "SibSp            0  0.000000    int64\n",
       "Ticket           0  0.000000   object"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = all_data.drop(['Survived'],axis=1).isnull().sum().sort_values(ascending=False)\n",
    "percent = (all_data.drop(['Survived'],axis=1).isnull().sum()/all_data.drop(['Survived'],axis=1).isnull().count()).sort_values(ascending=False)\n",
    "Type = all_data.drop(['Survived'],axis=1).dtypes\n",
    "pd.concat([total,percent,Type], axis=1, keys=['Total','Percent','Type'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Pclass\n",
    "\n",
    "* 3等座人数最多，1等2等差不多\n",
    "* 等级越高，存活率越高"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>216</td>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>184</td>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>491</td>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  count  Survived\n",
       "0       1    216  0.629630\n",
       "1       2    184  0.472826\n",
       "2       3    491  0.242363"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean()\n",
    "count = train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).count()\n",
    "count.columns = ['Pclass','count']\n",
    "pd.merge(count,survived,how = 'left', on=['Pclass'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sex\n",
    "女性生存几率大大高于男性"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>female</td>\n",
       "      <td>314</td>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>male</td>\n",
       "      <td>577</td>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  count  Survived\n",
       "0  female    314  0.742038\n",
       "1    male    577  0.188908"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean()\n",
    "count = train[['Sex','Survived']].groupby(['Sex'],as_index=False).count()\n",
    "count.columns = ['Sex','count']\n",
    "pd.merge(count,survived,how = 'left', on=['Sex'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Embarked\n",
    "登船口以S居多，C的存活率较其他两个稍微高一点"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C</td>\n",
       "      <td>168</td>\n",
       "      <td>0.553571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Q</td>\n",
       "      <td>77</td>\n",
       "      <td>0.389610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>S</td>\n",
       "      <td>644</td>\n",
       "      <td>0.336957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Embarked  count  Survived\n",
       "0        C    168  0.553571\n",
       "1        Q     77  0.389610\n",
       "2        S    644  0.336957"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean()\n",
    "count = train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).count()\n",
    "count.columns = ['Embarked','count']\n",
    "pd.merge(count,survived,how ='left', on=['Embarked'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Age\n",
    "从年龄上看，并没有太大的差别"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nKW+nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a11fe1710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Survived\", y=\"Age\", data=train[['Age','Survived']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fare\n",
    "* 票价的范围比较大，最大的超过了500\n",
    "* 幸存者票价会略高一些"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAACM/R+pRnw8O9JSbgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1a797f28>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Survived\", y=\"Fare\", data=train[['Fare','Survived']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. 数据清洗<a id='数据清洗'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "首先处理缺失数据。对于乘客的年龄，考虑到其年龄可能会与其称谓头衔有关，故先从Name字段中提炼出头衔，并对一些少数的特殊称谓汇总。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data['Title'] = all_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "\n",
    "Title_Dictionary = {\n",
    "                    \"Capt\":       \"Officer\",\n",
    "                    \"Col\":        \"Officer\",\n",
    "                    \"Major\":      \"Officer\",\n",
    "                    \"Jonkheer\":   \"Royalty\",\n",
    "                    \"Don\":        \"Royalty\",\n",
    "                    \"Sir\" :       \"Royalty\",\n",
    "                    \"Dr\":         \"Officer\",\n",
    "                    \"Rev\":        \"Officer\",\n",
    "                    \"Countess\":   \"Royalty\",\n",
    "                    \"Dona\":       \"Royalty\",\n",
    "                    \"Mme\":        \"Mrs\",\n",
    "                    \"Mlle\":       \"Miss\",\n",
    "                    \"Ms\":         \"Mrs\",\n",
    "                    \"Mr\" :        \"Mr\",\n",
    "                    \"Mrs\" :       \"Mrs\",\n",
    "                    \"Miss\" :      \"Miss\",\n",
    "                    \"Master\" :    \"Master\",\n",
    "                    \"Lady\" :      \"Royalty\"\n",
    "                    }\n",
    "all_data['Title'] = all_data.Title.map(Title_Dictionary)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Title\n",
    "Mrs和Miss的存活率还是蛮高的，Mr就比较悲剧，这跟性别有很大关系"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Master</td>\n",
       "      <td>40</td>\n",
       "      <td>0.575000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Miss</td>\n",
       "      <td>184</td>\n",
       "      <td>0.701087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr</td>\n",
       "      <td>517</td>\n",
       "      <td>0.156673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mrs</td>\n",
       "      <td>127</td>\n",
       "      <td>0.795276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Officer</td>\n",
       "      <td>18</td>\n",
       "      <td>0.277778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Royalty</td>\n",
       "      <td>5</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Title  count  Survived\n",
       "0   Master     40  0.575000\n",
       "1     Miss    184  0.701087\n",
       "2       Mr    517  0.156673\n",
       "3      Mrs    127  0.795276\n",
       "4  Officer     18  0.277778\n",
       "5  Royalty      5  0.600000"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = all_data.ix[:train.shape[0],['Title','Survived']].groupby(['Title'], as_index = False).mean()\n",
    "count = all_data.loc['train',['Title','Survived']].groupby(['Title'], as_index = False).count()\n",
    "count.columns = ['Title','count']\n",
    "pd.merge(count,survived,how ='left', on=['Title'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* 不同Title的平均年龄还是有较大区别的"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nYvPmzbS3t/PMM8+E5TjPNZajR49y6tQpfve73xETE8Ntt93GO++8w/79+xk1ahT33nsvf//732ls\nbGT+/PlUVlZSVlbG5s2bsdvtrFy5EofDwc0338z27dtpbm7mhz/8ISNHjgzauF577TUKCgr45JNP\niImJYfr06Zw5c4YjR46wdetW2tvbmT17NllZWUyZMoXt27dz0003UV1dzYYNG3j99dcpKipi+PDh\n/PnPf6aqqsobDgMGDGDq1Kn069ePUaNGkZCQwHvvvUe/fv04cuSI6cEAnYeUrrjiCp/HR48ezbXX\nXsu//vUvFi5ciMfjoV+/fuTk5LBq1SoAVq9ezdy5c8nOzqampoZ3332XJ598koKCAr72ta/x6quv\n8otf/IIf/ehHnDhxgj/96U+mzDjCdxcwzEyZMoVnn32WXbt2MXbsWO/jdrs9IoMB/BvTkiVLeO21\n17j55pvZvXt3yPem/XG+cXVZtWoVmzdv5uabb+bDDz/E4/GE7TjPNZaYmBhiY2P58Y9/zNKlS/no\no49ob29n2rRppKSkcPvtt7Np0yasVutZbTU0NFBbW0tBQQGLFi2ivb2dkydPAjBkyJCgjqvrsNKm\nTZuIjY1l0KBB/POf/2Ts2LFYLBZiY2MZPXo0//znP7nxxhuprq6moaGBfv360a9fPy677DIefvhh\nioqK+Mtf/kJ7e/t5+/rud79LVVUVzzzzDN/+9reDMr4BAwZw5MgRn8e7Zm3dOXToEF/+8pcBuO66\n67j22mtpaGjg0UcfpaCggIceeohPPvkEgEGDBpl2KCo8/gIiwOc//3mam5upqKg46wUWLm8iF8Kf\nMT3xxBPceeed3pOazz//fNDrDNT5xtVl69atLF++nMrKSvbt28eePXvCdpznGktTUxMvvPACDz74\nICUlJXR0dODxeKipqeErX/kKv//978nLy+M3v/kNAB6PB+g8hzF58mQqKip47LHHyMvLIzU1FQjd\n69hut1NeXu491NJ1SMnlcrFnzx4GDx7MwIED6du3Lxs3bmTatGkA/PznP2fRokWsXr2aYcOGecfY\nxWKxeN+E8/LyqKur4/nnnw9aOFx33XXs3LmTt99+2/vYH//4R+x2e4+/66FDh/LOO+8AUF1dTUVF\nBWlpadxzzz1UVFSwfPly8vLyAHP/33RYKQDf+ta3ePrppxkyZAiHDx8OdTmG6GlMo0aN4o477iA5\nOZmkpCQmTJgQ/CIvQHfjGj58OLNnzyY5OZkBAwYwevRompqawnacnx2L1WolMTGRmTNnAtC/f38+\n/vhjvvQo6bpFAAACoklEQVSlL1FUVMQjjzxCR0cHS5YsATrfbO655x5WrlxJcXExN998M01NTcye\nPTssdm6uvPJKCgoKePHFFxk0aBAzZszA5XKRl5fHVVddBcD06dNZsWIF5eXlAHz729/mrrvuIiUl\nhcsvvxyHw3FWm1dffTUPPPAAQ4cOJSsri2uuuYaTJ096w9BsycnJbNy4kZUrV3Lq1CncbjfDhw9n\n7dq1vPDCC93+7E9+8hOWLVvGI488QkJCAuXl5UyYMIGysjJaW1s5c+YM9913n+ljsHg+G7kiImHm\nueeeo6GhgbvuuuuCfn758uVMnDiRcePGGVxZ9NLMQUTC2tq1a6mvr2fjxo0X9PO33nordrtdwRAg\nzRxERMRH6A84iohI2FE4iIiID4WDiIj40AlpkQu0fPlydu/ejcvl4oMPPmDo0KEAzJgxA4vFwqxZ\ns1iyZAkLFy5k4MCBfOMb3+APf/gDgwYNCnHlIj1TOIhcoNLSUgCOHDnCLbfcwtNPP+3znPr6ehYs\nWBDs0kQumsJBxGDr168HID4+no8//pi5c+eyadMm7/fdbjcPPPAAr7/+Om63m/z8fL7//e+HqFqR\nc9M5BxGTzJ07l8suu4xf//rXZ91/a+vWrQA89dRTPPnkk9TU1PD3v/89VGWKnJNmDiJB9uqrr7Jv\n3z5ee+01AJqbmzlw4MA5bxIoEioKB5Egc7vd3HvvvUycOBGAkydPkpSUFOKqRM6mw0oiJrJarbjd\n7rMey8rKYuvWrbhcLpxOJ7Nnz+att94KUYUi56aZg4iJJkyYwNy5c723zwaYOXMm77//PlOnTqW9\nvZ38/HwyMzNDWKWIL91bSUREfOiwkoiI+FA4iIiID4WDiIj4UDiIiIgPhYOIiPhQOIiIiA+Fg4iI\n+Pj/062xlYFUG3AAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1a797470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Title\", y=\"Age\", data=all_data[['Title','Age']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* 不同等级仓位的平均年龄也有一定区别"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1ac0b0b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Pclass\", y=\"Age\", data=all_data[['Pclass','Age']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "基于以上两个属性，对缺失的年龄进行分组填充"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [],
   "source": [
    "age_df=all_data.loc[:,['Title','Pclass','Age']].groupby(['Pclass','Title'],as_index=False).mean()\n",
    "age_df['Age'] = round(age_df['Age'])\n",
    "age_df.rename(columns={'Age':'Age_p'},inplace = True)\n",
    "all_data = pd.merge(all_data, age_df, how='left', on=['Title', 'Pclass'])\n",
    "all_data['Age'].where(all_data['Age'].notnull(),all_data['Age_p'],inplace = True)\n",
    "all_data.drop(['Age_p'],axis = 1,inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cabin\n",
    "cabin因为缺失值过多，所以令缺失值为0，反之为1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['Cabin'].loc[all_data['Cabin'].isnull()]=0\n",
    "all_data['Cabin'].loc[all_data['Cabin']!=0]=1\n",
    "all_data['Cabin']=all_data['Cabin'].astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Embarked和Fare的缺失值都分别填上众数和平均数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "freq_port = all_data.Embarked.dropna().mode()[0]\n",
    "all_data['Embarked'] = all_data['Embarked'].fillna(freq_port)\n",
    "all_data['Fare'].fillna(all_data['Fare'].mean(),inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "再次检查缺失值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent     Type\n",
       "Age              0      0.0  float64\n",
       "Cabin            0      0.0    int64\n",
       "Embarked         0      0.0   object\n",
       "Fare             0      0.0  float64\n",
       "Name             0      0.0   object\n",
       "Parch            0      0.0    int64\n",
       "PassengerId      0      0.0    int64\n",
       "Pclass           0      0.0    int64\n",
       "Sex              0      0.0   object\n",
       "SibSp            0      0.0    int64\n",
       "Ticket           0      0.0   object\n",
       "Title            0      0.0   object"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = all_data.drop(['Survived'],axis=1).isnull().sum().sort_values(ascending=False)\n",
    "percent = (all_data.drop(['Survived'],axis=1).isnull().sum()/all_data.drop(['Survived'],axis=1).isnull().count()).sort_values(ascending=False)\n",
    "Type = all_data.drop(['Survived'],axis=1).dtypes\n",
    "pd.concat([total,percent,Type], axis=1, keys=['Total','Percent','Type'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FamilySize\n",
    "增加家庭成员人数字段"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data['FamilySize'] = all_data['SibSp'] + all_data['Parch'] + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "删掉不用的字段"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data.drop(['PassengerId','Name','SibSp','Parch','Ticket'],axis = 1,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age           float64\n",
       "Cabin           int64\n",
       "Embarked       object\n",
       "Fare          float64\n",
       "Pclass          int64\n",
       "Sex            object\n",
       "Survived      float64\n",
       "Title          object\n",
       "FamilySize      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "对数据进行必要的处理，为喂入模型做准备"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['Sex'].loc[all_data['Sex']=='male']=0\n",
    "all_data['Sex'].loc[all_data['Sex']=='female']=1\n",
    "all_data['Sex'] = all_data['Sex'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_x=all_data.drop(['Survived'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_x=pd.get_dummies(df_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age     0.452129\n",
       "Fare    4.364366\n",
       "dtype: float64"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "df_x[['Age','Fare']].apply(lambda x: stats.skew(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fare偏度过大，将其取对数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_x['Fare'] = np.log1p(df_x['Fare'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "将所有数据标准化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "df_x=pd.DataFrame(MinMaxScaler().fit_transform(df_x),columns=df_x.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Officer</th>\n",
       "      <th>Title_Royalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.366910</td>\n",
       "      <td>0.225363</td>\n",
       "      <td>0.477467</td>\n",
       "      <td>0.647441</td>\n",
       "      <td>0.355997</td>\n",
       "      <td>0.088388</td>\n",
       "      <td>0.206264</td>\n",
       "      <td>0.093965</td>\n",
       "      <td>0.699771</td>\n",
       "      <td>0.046600</td>\n",
       "      <td>0.200153</td>\n",
       "      <td>0.578304</td>\n",
       "      <td>0.152788</td>\n",
       "      <td>0.017571</td>\n",
       "      <td>0.004584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.168089</td>\n",
       "      <td>0.417981</td>\n",
       "      <td>0.155173</td>\n",
       "      <td>0.418918</td>\n",
       "      <td>0.478997</td>\n",
       "      <td>0.158364</td>\n",
       "      <td>0.404777</td>\n",
       "      <td>0.291891</td>\n",
       "      <td>0.458533</td>\n",
       "      <td>0.210862</td>\n",
       "      <td>0.400267</td>\n",
       "      <td>0.494019</td>\n",
       "      <td>0.359921</td>\n",
       "      <td>0.131435</td>\n",
       "      <td>0.067573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.260929</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.350202</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.348616</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.438698</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.455092</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.556696</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age        Cabin         Fare       Pclass          Sex  \\\n",
       "count  1309.000000  1309.000000  1309.000000  1309.000000  1309.000000   \n",
       "mean      0.366910     0.225363     0.477467     0.647441     0.355997   \n",
       "std       0.168089     0.417981     0.155173     0.418918     0.478997   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%       0.260929     0.000000     0.350202     0.500000     0.000000   \n",
       "50%       0.348616     0.000000     0.438698     1.000000     0.000000   \n",
       "75%       0.455092     0.000000     0.556696     1.000000     1.000000   \n",
       "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "        FamilySize   Embarked_C   Embarked_Q   Embarked_S  Title_Master  \\\n",
       "count  1309.000000  1309.000000  1309.000000  1309.000000   1309.000000   \n",
       "mean      0.088388     0.206264     0.093965     0.699771      0.046600   \n",
       "std       0.158364     0.404777     0.291891     0.458533      0.210862   \n",
       "min       0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "25%       0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "50%       0.000000     0.000000     0.000000     1.000000      0.000000   \n",
       "75%       0.100000     0.000000     0.000000     1.000000      0.000000   \n",
       "max       1.000000     1.000000     1.000000     1.000000      1.000000   \n",
       "\n",
       "        Title_Miss     Title_Mr    Title_Mrs  Title_Officer  Title_Royalty  \n",
       "count  1309.000000  1309.000000  1309.000000    1309.000000    1309.000000  \n",
       "mean      0.200153     0.578304     0.152788       0.017571       0.004584  \n",
       "std       0.400267     0.494019     0.359921       0.131435       0.067573  \n",
       "min       0.000000     0.000000     0.000000       0.000000       0.000000  \n",
       "25%       0.000000     0.000000     0.000000       0.000000       0.000000  \n",
       "50%       0.000000     1.000000     0.000000       0.000000       0.000000  \n",
       "75%       0.000000     1.000000     0.000000       0.000000       0.000000  \n",
       "max       1.000000     1.000000     1.000000       1.000000       1.000000  "
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_x.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "数据切分"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x_train = df_x[:train.shape[0]]\n",
    "x_test = df_x[train.shape[0]:]\n",
    "y_train = train['Survived']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. baseline建模及评估<a id='baseline建模及评估'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "本次准备尝试LR,SVM,KNN,RF,Xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import learning_curve\n",
    "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n",
    "                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n",
    "    plt.figure()\n",
    "    plt.title(title)\n",
    "    if ylim is not None:\n",
    "        plt.ylim(*ylim)\n",
    "    plt.xlabel(\"Training examples\")\n",
    "    plt.ylabel(\"Score\")\n",
    "    train_sizes, train_scores, test_scores = learning_curve(\n",
    "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "    plt.grid(True)\n",
    "\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
    "                     color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
    "             label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
    "             label=\"Cross-validation score\")\n",
    "\n",
    "    plt.legend(loc=\"best\")\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score\n",
    "import time\n",
    "def kfold_plot(train, ytrain, model):\n",
    "    kf = StratifiedKFold(n_splits=5)\n",
    "    accuracy_scores = []\n",
    "    exe_time = []\n",
    " \n",
    "    i=0\n",
    "    for train_index, test_index in kf.split(train, ytrain):\n",
    "        X_train, X_test = train.iloc[train_index], train.iloc[test_index]\n",
    "        y_train, y_test = ytrain.iloc[train_index], ytrain.iloc[test_index]\n",
    "        begin_t = time.time()\n",
    "        predictions,model_o = model(X_train, X_test, y_train)\n",
    "        end_t = time.time()\n",
    "        exe_time.append(round(end_t-begin_t, 3))      \n",
    "        \n",
    "        accuracy_scores.append(accuracy_score(y_test.astype(float), predictions)) \n",
    "        \n",
    "        i += 1\n",
    "\n",
    "    print ('mean accuracy_scores: ', np.mean(accuracy_scores))\n",
    "    print ('mean model process time: ', np.mean(exe_time), 's')\n",
    "    plot_learning_curve(model_o, \"Learning Curves\",train, ytrain, ylim=(0.1, 1.01), n_jobs=1,cv=10)\n",
    "    plt.show()\n",
    "    return np.mean(accuracy_scores),np.mean(exe_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mean_accuracy = {}\n",
    "mean_time = {}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.827184216396\n",
      "mean model process time:  0.0036 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n/X40G/6mlv1+P5qZ785Y622+//57nH/+WZxxxhhOOulYpk6d0uFGr3XpsMO+BsDkyZP49NNP282b\nO3cOY8ee3OX6999/H+D3TvrQQw+UJsg+QlcBiaynZr47gzFPtt0J/PaiN3PjR269ZjeDLVu2jAkT\nLuFnP/sVw4dvSjqd5tJLL+Khh+7niCNKe4PZ6jrrrHPXaL3p0+/gW9/6bih6J1UCEOmnJrwwnoff\n67w30E9XFO8NdOzTY5j44oSi8w4dcQQT9uy8f6Hnnvsro0btlus6IRaLMX78FZSVleV6BK2qSnDQ\nQYdRX1/Prbf+hoqKCgYOHMTFF19GKpXi8ssvJpPJkEwmOf/8i9l0082L9uKZlUqlOProo5g27V4q\nKyu55567iMWi7Lbb7tx443VkMhkWL17MeeddxI47jmx7n2NP5vzzL2HAgGquvHI8nudRV1efm//4\n448zbdpv2/VY+tBD97N06RKuueaXbLfd9rkur++9926efvoJYrEYI0fuwmmnncnUqVP4738/obGx\nkc8++y9nnPETdt99dG77q9s76R/+cC9lZWUdeieNxSIce+xJJemdVAlAZD3Vmine62dn07tjwYL5\nbLTRxu2mVVVV5YaTySQPPvgAn3++lO9853Buvvl2GhqG8oc/3Mv06VMZNWpXBg4cxKWXXsEHH3zA\nypUri/bimS8ej7Pffgfw7LNPc9BBh/DUU49z3XW/5t///hdjx57DiBFb8cQTj/PYYw+3SwBZv/3t\nVL7yla9x2GFH8vTTTzBzpt8MNmfOnA49lh533Incf/8fOO+8i3jsMf+x5e+9N5tnnnmSW265g1gs\nxrhxF/D8838HoKysnEmTbuCll17k3nt/1y4BrG7vpHfe+TuqqgZ06J106tTbeO+9j0vSO6kSgEg/\nNWHPiV0ere/3+9G8vahjb6Db1e/As99ds95Ahw3bkHfemdVu2iefzOPzzz8D2noEXbx4MVVVA2ho\nGArAzjvvwpQpN3PaaWfy8ccfctFF5xKPxznuuBOL9uL5f//3GrfddjMAP/jBsRx66BFcc80v2Wyz\nzRk+fDMGDRrMkCFDmTbtdioqKmhqamLAgAFFY/7oow859NAjAdhxx5G5BFBfX99lj6VZc+fOYfvt\nd8z1PTRy5M588MF7AGyzjf+Am6FDN+jQo+nq9k6a7f20N3sn1UlgkfXU2V8s3gZ+1qg17w10r732\n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\n4upSByciIqXTZQ3AzGY4514AhpjZf4LJy4GTzOzZUgcnIiKls8r7AMzsE+CTvPHHShqRiIj0iu7e\nCSwiIusZJQARkZBSAhARCSklABGRkFICEBEJKSUAEZGQUgIQEQkpJQARkZBSAhARCSklABGRkFIC\nEBEJKSUAEZGQUgIQEQkpJQARkZBSAhARCSklABGRkFICEBEJqVU+EWxNOeeiwM3ASKAF/zGSs4ss\ndyuwyMwuKlUsIiLSUSlrAEcACTMbDVwETCpcwDk3BtixhDGIiEgnSpkA9gYeBzCzF4Fd82c65/YE\ndgemlDAGERHpRMmagICBwJK88bRzLm5mKefchsDlwJHAd7qzsdraKuLxWAnCbNPQUFPS7fcUxdnz\n+kusirNnhT3OUiaApUB+1FEzSwXD3waGAI8BGwBVzrlZZjats401NjaVKk7A/4Dnz19W0n30BMXZ\n8/pLrIqzZ4Ulzq6SRykTwPPAocAfnHN7AK9nZ5jZDcANAM65HwHbdlX4i4hIzytlApgJHOicewGI\nAMc7534AVJvZrSXcr4iIdEPJEoCZZYBTCibPKrLctFLFICIindONYCIiIaUEICISUkoAIiIhpQQg\nIhJSSgAiIiGlBCAiElJKACIiIaUEICISUkoAIiIhpQQgIhJSSgAiIiGlBCAiElJKACIiIaUEICIS\nUkoAIiIhpQQgIhJSSgAiIiGlBCAiElJKACIiIaUEICISUkoAIiIhpQQgIhJSSgAiIiGlBCAiElJK\nACIiIaUEICISUkoAIiIhpQQgIhJSSgAiIiGlBCAiElJKACIiIaUEICISUkoAIiIhpQQgIhJSSgAi\nIiGlBCAiElJKACIiIaUEICISUkoAIiIhpQQgIhJS8VJt2DkXBW4GRgItwElmNjtv/veBs4EU8Dpw\nmpllShWPiIi0V8oawBFAwsxGAxcBk7IznHOVwETgy2a2FzAIOKSEsYiISIFSJoC9gccBzOxFYNe8\neS3AnmbWFIzHgeYSxiIiIgVK1gQEDASW5I2nnXNxM0sFTT2fATjnzgCqgSe72lhtbRXxeKxkwQI0\nNNSUdPs9RXH2vP4Sq+LsWWGPs5QJYCmQH3XUzFLZkeAcwdXANsC3zMzramONjU1dzV5rDQ01zJ+/\nrKT76AmKs+f1l1gVZ88KS5xdJY9SNgE9D3wDwDm3B/6J3nxTgARwRF5TkIiI9JJS1gBmAgc6514A\nIsDxzrkf4Df3/Bs4Efg78IxzDmCymc0sYTwiIpKnZAkgaOc/pWDyrLxh3YMgIrIOqRAWEQkpJQAR\nkZBSAhARCSklABGRkFICEBEJKSUAEZGQUgIQEQkpJQARkZBSAhARCSklABGRkFICEBEJKSUAEZGQ\nUgIQEQkpJQARkZBSAhARCSklABGRkFICEBEJKSUAEZGQUgIQEQmpiOd56zoGERFZB1QDEBEJKSUA\nEZGQUgIQEQkpJQARkZBSAhARCSklABGRkFICEBEJqfi6DqC3Oed2B64ys/2dc1sB0wAPeAM43cwy\nzrkfA2OAFDDRzB7pxfjKgDuAzYEKYCLwVh+MMwbcBrggrlOA5r4WZ168Q4GXgQODOPpqnK8AS4PR\nD4Cf9cVYnXMXA4cB5cDNwF/7WpzOuR8BPwpGE8DOwN7A9X0szjJgOv5vPg38mF76joaqBuCcuwC4\nHf/LAHAtMN7M9gEiwOHOuQ2AM4G9gK8Bv3DOVfRimMcAC4OYvg7c1EfjPBTAzPYCxuMXVH0xzuwP\nbAqwMpjUV+NMABEz2z/4O74vxuqc2x/YM9j/fsDwvhinmU3Lfpb4yf9M4LK+FifwDSBuZnsCV9KL\nv6VQJQDgPeCbeeNfxD9yAfgz8BXgS8DzZtZiZkuA2cBOvRjjH4FLg+EIfqbvc3Ga2YPAycHoZsDi\nvhhn4BrgFuCTYLyvxjkSqHLOPeGce8Y5t0cfjfVrwOvATOBh4JE+GicAzrldge3N7NY+Guc7QNw5\nFwUGAq29FWeoEoCZ3Y//4WZFzCzbF8YyYBD+P2BJ3jLZ6b3CzJab2TLnXA0wA//ous/FGcSacs5N\nB24EftcX4wyaAeab2V/yJve5OANN+Mnqa/hNan3yMwWGALsC386LM9oH48y6BLgiGO6Ln+dy/Oaf\nWfjNqjfQS3GGKgEUkckbrsE/il0aDBdO7zXOueHA/wJ3mdk99NE4AczsOGAb/C9uZZF41nWcJwAH\nOueexW8D/i0wtEg86zpO8I8E7zYzz8zeARYCw4rEtK5jXQj8xcySZmb4537yC6K+EifOucGAM7P/\nDSb1xd/SOfif5zb4tcDp+OdWCuPp8TjDngBeDdozAQ4C/g78C9jHOZdwzg0CvoB/EqZXOOeGAU8A\nF5rZHX04zh8GJwLBP3LNAP/ua3Ga2b5mtl/QDvwacCzw574WZ+AEYBKAc24j/CO+J/pgrM8BX3fO\nRYI4BwBP98E4AfYFns4b73O/JaCRtiP7RUBZb8UZuquACpwL3OacKwfeBmaYWdo5dwP+Bx4FxplZ\ncy/GdAlQC1zqnMueCzgLuKGPxfkAcKdz7m/4X9izg9j62udZTF/8vwNMBaY5557Dv/rjBGBBX4vV\nzB5xzu2LXyBFgdPxr1jqU3EGHPB+3nhf/N9fB9zhnPs7/pH/JcC/eyNOdQctIhJSYW8CEhEJLSUA\nEZGQUgIQEQkpJQARkZBSAhARCamwXwYqfZBz7tf4/Z2UA1vhd4YHMNnM7uzmNq4E/m1mf+pimdfM\nbOe1jXddc85tDjxrZpuv41Ckn9FloNJnqWDrHn1OsqZUA5B+xTk3AdgD2BS/p9Q38XtPrMK/ge4C\nM/ujc24a8GzwNxP/jsldgM+Ab5vZIuecZ2aRYJsbA1vjd2x3u5n9LOhF9Bb8LoTn4d+c9VMze7Yg\npouA7wAx4C/Ahfi9pU4CdgQ2CeLYAxiM33dSNX6XFJPM7IYghk3xuwIYit8H1AHA7sD/Ad/D73nz\nCvz+rIbj34h1UkEsw/B7Ph2Of3f2xWb2lHPuf4Crg/fQCHzfzBZ0+4OX9ZLOAUh/lDCz7czsZuAM\n4CQzGwWciN/db6GRwLVmtgN+3ylHF1lmJ+Cr+AXuRUEfMqfgd3OwLXA8sFvhSs65r+P33LgbfoLZ\nGDg6aHp6ARgH3AmcZ2Yf4xfYE81sN+DL+Mkra8dg/8fgPxPiKmAHYBRtvT5+Cf/O223xuzU/vSCk\nycAdZvZF/P76pwQdC44HTjGzXfF78BxV5DOQkFENQPqjf+YNHwMc4pz7Nv4RdnWR5T83s1eD4TeA\nuiLL/K+ZJYHPnXOL8Ds3OxC4LeiVca5z7uki630Fv9B+ORivBD4Mhs/CP3/xvJn9Pph2Ln4/Ohfj\nF+r58T4Z9LA6F/ivmb0F4Jybh1+7Afhb0AEbzrm78LvkfqAgnm2DcyDgd9MxAvgTMNM59yDwkJk9\nWeS9SMioBiD90cq84b/jHxW/jH80HSmyfH5/Kd5qLJNm1b+RGHC9me0cnFDenbaj+mHBNrbNe3DH\nH4Aj8RPDJQXbSuYNpzrZX/70aJHlYsABefHsAbxuZtcB++P3IX+1c27cKt6XhIASgPRbzrk6/K6o\nLzOzx/CbcGI9uIsnge/l9Xq5P35yyPcM8EPnXLVzLg48CBzl/EdmTsOvBfwV+Gmw/IFBvA/ht+ln\nH6/ZXXs75zYOHh5yLP7DQgrjOS3Y7nbAf/AfMvNPoMbMrsfvfExNQKIEIP2XmS3Cf8Tnm865V/FP\nnlY55wb00C5uw3/oxuv4fbTPpX3tAzN7GLgfv1nqDfwup6fjN/V8ZmYP4B/pfy94wtcE4DnnP/v3\na8AcYIvViOkT/GcavIV/Yvr2gvlnAHs45/4D3Af80MyWBTFMc869jN9sdPlq7FPWU7oMVKQTzrmD\n8Z/M9EjQ//qrwK5B4lkX8ewPTAiebSCy1nQSWKRzbwF3OecmBuOXravCX6QUVAMQEQkpnQMQEQkp\nJQARkZBSAhARCSklABGRkFICEBEJqf8H6d7pYNQbflIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1ab64940>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "def lr_model(X_train, X_test, y_train):\n",
    "    model = LogisticRegression(C=100)\n",
    "    model.fit(X_train, y_train)\n",
    "    predictions = model.predict(X_test)    \n",
    "    return predictions,model\n",
    "mean_accuracy['lr'],mean_time['lr'] = kfold_plot(x_train, y_train, lr_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.823832261089\n",
      "mean model process time:  0.0232 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nIaUEICISUv8PrUO8l4xZo+cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1a9cca90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "def svc_model(X_train, X_test, y_train):\n",
    "    model = SVC(C=20)\n",
    "    model.fit(X_train, y_train)\n",
    "    predictions = model.predict(X_test)    \n",
    "    return predictions,model\n",
    "mean_accuracy['svc'],mean_time['svc'] = kfold_plot(x_train, y_train, svc_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.823832261089\n",
      "mean model process time:  0.0166 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nIaUEICISUv8PrUO8l4xZo+cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1b1cad30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "def knn_model(X_train, X_test, y_train):\n",
    "    model = SVC(C=20)\n",
    "    model.fit(X_train, y_train)\n",
    "    predictions = model.predict(X_test)    \n",
    "    return predictions,model\n",
    "mean_accuracy['knn'],mean_time['knn'] = kfold_plot(x_train, y_train, knn_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.822676925598\n",
      "mean model process time:  0.0194 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1d58edd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "def rf_model(X_train, X_test, y_train):\n",
    "    model = RandomForestClassifier(max_depth = 8,min_samples_leaf = 5,min_samples_split = 5)\n",
    "    model.fit(X_train, y_train)\n",
    "    predictions = model.predict(X_test)    \n",
    "    return predictions,model\n",
    "mean_accuracy['rf'],mean_time['rf'] = kfold_plot(x_train, y_train, rf_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.831672321349\n",
      "mean model process time:  0.0066 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n/OM+bHZrFQf+cR/mvzdvg7f5wQfvc+GF53HOOeM5/fSTmD17ZpsHvfrSUUcdCsD06dP4/PPPW81b\nunQJEyac0eH6Dz54P+D1TrpgwUOFCbKf0F1AIhup+e/NY/zTLU8Cv7Pq7ebxY0et38NgtbW1TJly\nGb/85bWMGLEVqVSKyy+/hAULHuSYYwr7gFl3nXfeBeu13ty5d/Kd73w/EL2TKgGIDFBTXprMo++3\n3xvo53X5ewOd8Ox4pr48Je+8I0cew5R92+9f6IUX/sa4cXs2d50QDoeZPPkqioqKmnsELS2Ncdhh\nRzF06FBuv/1WotEolZWDuPTSK0gmk1x55aWk02kSiQQXXngpW221Td5ePDOSySQnnHAcc+bcR0lJ\nCffeezfhcIg999yLm266gXQ6zerVq5k48RLGjBnb8j0nnMGFF15GWVk5V189Gdd1GTJkaPP8J598\nkjlzft+qx9IFCx5k7do1XHfdb9hxx52au7y+7757ePbZpwiHw4wduxtnn30us2fP5LPPPqWmpoYv\nvviMc875OXvttU/z9rvbO+kDD9xHUVFRm95Jw2GHk046vSC9kyoBiGykmtL5e/1sb3pXrFixnM03\n36LVtNLS0ubhRCLBww8/xJdfruV73zuaW265g+rq4TzwwH3MnTubceP2oLJyEJdffhUffvghDQ0N\neXvxzBaJRDjwwIN5/vlnOeywI3jmmSe54Ybf8Z///JsJE37GyJHb89RTT/LEE4+2SgAZv//9bL7+\n9UM56qhjefbZp5g/32sGW7JkSZseS08++TQefPABJk68hCee8F5b/v77i3nuuae57bY7CYfDTJp0\nES+++A8AioqKmTZtBq+88jL33feHVgmgu72T3nXXHygtLWvTO+ns2bN4//1PCtI7qRKAyAA1Zd+p\nHdbWD/zjPryzqm1voDsO3Znnv79+vYFusslmvPvuolbTPv10GV9++QXQ0iPo6tWrKS0to7p6OAC7\n7robM2fewtlnn8snn3zEJZdcQCQS4eSTT8vbi+d///sGs2bdAsAPf3gSRx55DNdd9xu23nobRozY\nmkGDBjNs2HDmzLmDaDRKfX09ZWVleWP++OOPOPLIYwEYM2ZscwIYOnRohz2WZixduoSddhrT3PfQ\n2LG78uGH7wMwerT3gpvhwzdt06Npd3snzfR+2pu9k+oisMhG6vzd87eBnzdu/XsD3W+//fnXv15i\n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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1d55de80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost.sklearn import XGBClassifier\n",
    "def xgb_model(X_train, X_test, y_train):\n",
    "    model = XGBClassifier(learning_rate =0.1, n_estimators=10, max_depth=3,\\\n",
    "        min_child_weight=1, gamma=0,subsample=0.9,colsample_bytree=0.9,\\\n",
    "        objective= 'binary:logistic',scale_pos_weight=1, seed=27)\n",
    "    model.fit(X_train, y_train)\n",
    "    predictions = model.predict(X_test)    \n",
    "    return predictions,model\n",
    "mean_accuracy['xgb'],mean_time['xgb'] = kfold_plot(x_train, y_train, xgb_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = XGBClassifier(learning_rate =0.1, n_estimators=10, max_depth=3,\\\n",
    "    min_child_weight=1, gamma=0,subsample=0.9,colsample_bytree=0.9,\\\n",
    "    objective= 'binary:logistic',scale_pos_weight=1, seed=27)\n",
    "model.fit(x_train, y_train)\n",
    "y = model.predict(x_test)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "obj = pd.Series(y,name = 'Survived')\n",
    "result = pd.concat([test['PassengerId'],obj],axis=1)\n",
    "result.to_csv('titanic0118.csv',index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. 误差分析<a id='误差分析'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. 进一步特征工程<a id='进一步特征工程'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 7. 模型调优及融合<a id='模型调优及融合'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 8. 总结<a id='总结'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
