{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Titanic存活预测\n",
    "\n",
    "**目录**\n",
    "\n",
    "1. [概述](#概述)\n",
    "2. [数据分析](#数据分析)\n",
    "3. [数据清洗](#数据清洗)\n",
    "4. [baseline建模及评估](#baseline建模及评估) \n",
    "5. [模型融合及评估](#模型融合及评估)\n",
    "6. [预测及提交](#预测及提交)\n",
    "7. [总结](#总结)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 概述<a id='概述'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Titanic存活预测是Kaggle上的入门赛题。给定一些乘客的信息，及其最后是否存活的label，作为训练样本,预测其他乘客是否存活，是典型的二分类问题。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. 数据分析<a id='数据分析'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "首先导入数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import warnings\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')\n",
    "all_data = pd.concat([train,test],keys = ['train','test'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "891 418\n"
     ]
    }
   ],
   "source": [
    "print(train.shape[0],test.shape[0]) #训练集891条，测试集418条"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3838383838383838"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Survived'].mean() #平均存活率38.4%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Missing Data\n",
    "年龄与舱位的数据缺失比较严重"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>263</td>\n",
       "      <td>0.200917</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>1014</td>\n",
       "      <td>0.774637</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>2</td>\n",
       "      <td>0.001528</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000764</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total   Percent     Type\n",
       "Age            263  0.200917  float64\n",
       "Cabin         1014  0.774637   object\n",
       "Embarked         2  0.001528   object\n",
       "Fare             1  0.000764  float64\n",
       "Name             0  0.000000   object\n",
       "Parch            0  0.000000    int64\n",
       "PassengerId      0  0.000000    int64\n",
       "Pclass           0  0.000000    int64\n",
       "Sex              0  0.000000   object\n",
       "SibSp            0  0.000000    int64\n",
       "Ticket           0  0.000000   object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = all_data.drop(['Survived'],axis=1).isnull().sum().sort_values(ascending=False)\n",
    "percent = (all_data.drop(['Survived'],axis=1).isnull().sum()/all_data.drop(['Survived'],axis=1).isnull().count()).sort_values(ascending=False)\n",
    "Type = all_data.drop(['Survived'],axis=1).dtypes\n",
    "pd.concat([total,percent,Type], axis=1, keys=['Total','Percent','Type'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Pclass\n",
    "\n",
    "* 3等座人数最多，1等2等差不多\n",
    "* 等级越高，存活率越高"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>216</td>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>184</td>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>491</td>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  count  Survived\n",
       "0       1    216  0.629630\n",
       "1       2    184  0.472826\n",
       "2       3    491  0.242363"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean()\n",
    "count = train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).count()\n",
    "count.columns = ['Pclass','count']\n",
    "pd.merge(count,survived,how = 'left', on=['Pclass'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sex\n",
    "女性生存几率大大高于男性"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>female</td>\n",
       "      <td>314</td>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>male</td>\n",
       "      <td>577</td>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  count  Survived\n",
       "0  female    314  0.742038\n",
       "1    male    577  0.188908"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean()\n",
    "count = train[['Sex','Survived']].groupby(['Sex'],as_index=False).count()\n",
    "count.columns = ['Sex','count']\n",
    "pd.merge(count,survived,how = 'left', on=['Sex'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Embarked\n",
    "登船口以S居多，C的存活率较其他两个稍微高一点"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C</td>\n",
       "      <td>168</td>\n",
       "      <td>0.553571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Q</td>\n",
       "      <td>77</td>\n",
       "      <td>0.389610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>S</td>\n",
       "      <td>644</td>\n",
       "      <td>0.336957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Embarked  count  Survived\n",
       "0        C    168  0.553571\n",
       "1        Q     77  0.389610\n",
       "2        S    644  0.336957"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean()\n",
    "count = train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).count()\n",
    "count.columns = ['Embarked','count']\n",
    "pd.merge(count,survived,how ='left', on=['Embarked'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Age\n",
    "从年龄上看，并没有太大的差别"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\ntT/kHhIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11397ffd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Survived\", y=\"Age\", data=train[['Age','Survived']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fare\n",
    "* 票价的范围比较大，最大的超过了500\n",
    "* 幸存者票价会略高一些"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n669r9uzZeuGFFzR58mSVl5frqaee0uOPP67jx4/r97//vSorK/X888+rra0t4r8z0BW7mIBuHDp0\nSG63W6WlpZKkP//5zyoqKlJKSkrwPl1PRDBq1Ci5XC5J0uzZs/XGG2+oublZN998c8gJD2fMmKGC\nggLNmjVLXq9X6enpOnDggHbv3q1t27ZJklpaWvT5559r7NixwefMyMiI+O8MdMUMAujGZ599pief\nfFKBQECSNGbMGCUlJSk5OVnNzc2SpE8//TR4/5iYs2+nnJwc1dfXa/PmzZo1a1bI8yYmJuqaa65R\naWmpZs6cKUlKS0vT3LlzVV5erueee0633367rrzySh08eFCnTp1Se3u76uvrI/0rAyGYQQDd+MEP\nfqDGxkbdcccdio+Pl2maeuihh/SNb3xDTzzxhC6//HINHz7c8rGGYSgvL0/V1dVKTU097+ezZs3S\n/PnzgydDvPfee/Xoo4+qsrJSXq9X999/v4YNG6aioiLl5+dr2LBhXEUNfY6T9QEALLGLCQBgiYIA\nAFiiIAAAligIAIAlCgIAYImCAABYoiAAAJYoCACApf8Ps2vzC9hKmTAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e28a668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Survived\", y=\"Fare\", data=train[['Fare','Survived']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. 数据清洗<a id='数据清洗'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "首先处理缺失数据。对于乘客的年龄，考虑到其年龄可能会与其称谓头衔有关，故先从Name字段中提炼出头衔，并对一些少数的特殊称谓汇总。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data['Title'] = all_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "\n",
    "Title_Dictionary = {\n",
    "                    \"Capt\":       \"Officer\",\n",
    "                    \"Col\":        \"Officer\",\n",
    "                    \"Major\":      \"Officer\",\n",
    "                    \"Jonkheer\":   \"Royalty\",\n",
    "                    \"Don\":        \"Royalty\",\n",
    "                    \"Sir\" :       \"Royalty\",\n",
    "                    \"Dr\":         \"Officer\",\n",
    "                    \"Rev\":        \"Officer\",\n",
    "                    \"Countess\":   \"Royalty\",\n",
    "                    \"Dona\":       \"Royalty\",\n",
    "                    \"Mme\":        \"Mrs\",\n",
    "                    \"Mlle\":       \"Miss\",\n",
    "                    \"Ms\":         \"Mrs\",\n",
    "                    \"Mr\" :        \"Mr\",\n",
    "                    \"Mrs\" :       \"Mrs\",\n",
    "                    \"Miss\" :      \"Miss\",\n",
    "                    \"Master\" :    \"Master\",\n",
    "                    \"Lady\" :      \"Royalty\"\n",
    "                    }\n",
    "all_data['Title'] = all_data.Title.map(Title_Dictionary)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Title\n",
    "Mrs和Miss的存活率还是蛮高的，Mr就比较悲剧，这跟性别有很大关系"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>count</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Master</td>\n",
       "      <td>40</td>\n",
       "      <td>0.575000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Miss</td>\n",
       "      <td>184</td>\n",
       "      <td>0.701087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr</td>\n",
       "      <td>517</td>\n",
       "      <td>0.156673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mrs</td>\n",
       "      <td>127</td>\n",
       "      <td>0.795276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Officer</td>\n",
       "      <td>18</td>\n",
       "      <td>0.277778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Royalty</td>\n",
       "      <td>5</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Title  count  Survived\n",
       "0   Master     40  0.575000\n",
       "1     Miss    184  0.701087\n",
       "2       Mr    517  0.156673\n",
       "3      Mrs    127  0.795276\n",
       "4  Officer     18  0.277778\n",
       "5  Royalty      5  0.600000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived = all_data.ix[:train.shape[0],['Title','Survived']].groupby(['Title'], as_index = False).mean()\n",
    "count = all_data.loc['train',['Title','Survived']].groupby(['Title'], as_index = False).count()\n",
    "count.columns = ['Title','count']\n",
    "pd.merge(count,survived,how ='left', on=['Title'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* 不同Title的平均年龄还是有较大区别的"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11394fc88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Title\", y=\"Age\", data=all_data[['Title','Age']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* 不同等级仓位的平均年龄也有一定区别"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e2b2400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.boxplot(x=\"Pclass\", y=\"Age\", data=all_data[['Pclass','Age']], palette=\"muted\")\n",
    "sns.despine(offset=10, trim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "基于以上两个属性，对缺失的年龄进行分组填充"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "age_df=all_data.loc[:,['Title','Pclass','Age']].groupby(['Pclass','Title'],as_index=False).mean()\n",
    "age_df['Age'] = round(age_df['Age'])\n",
    "age_df.rename(columns={'Age':'Age_p'},inplace = True)\n",
    "all_data = pd.merge(all_data, age_df, how='left', on=['Title', 'Pclass'])\n",
    "all_data['Age'].where(all_data['Age'].notnull(),all_data['Age_p'],inplace = True)\n",
    "all_data.drop(['Age_p'],axis = 1,inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cabin\n",
    "cabin因为缺失值过多，所以令缺失值为0，反之为1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data['Cabin'].loc[all_data['Cabin'].isnull()]=0\n",
    "all_data['Cabin'].loc[all_data['Cabin']!=0]=1\n",
    "all_data['Cabin']=all_data['Cabin'].astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Embarked和Fare的缺失值都分别填上众数和平均数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "freq_port = all_data.Embarked.dropna().mode()[0]\n",
    "all_data['Embarked'] = all_data['Embarked'].fillna(freq_port)\n",
    "all_data['Fare'].fillna(all_data['Fare'].mean(),inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "再次检查缺失值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent     Type\n",
       "Age              0      0.0  float64\n",
       "Cabin            0      0.0    int64\n",
       "Embarked         0      0.0   object\n",
       "Fare             0      0.0  float64\n",
       "Name             0      0.0   object\n",
       "Parch            0      0.0    int64\n",
       "PassengerId      0      0.0    int64\n",
       "Pclass           0      0.0    int64\n",
       "Sex              0      0.0   object\n",
       "SibSp            0      0.0    int64\n",
       "Ticket           0      0.0   object\n",
       "Title            0      0.0   object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = all_data.drop(['Survived'],axis=1).isnull().sum().sort_values(ascending=False)\n",
    "percent = (all_data.drop(['Survived'],axis=1).isnull().sum()/all_data.drop(['Survived'],axis=1).isnull().count()).sort_values(ascending=False)\n",
    "Type = all_data.drop(['Survived'],axis=1).dtypes\n",
    "pd.concat([total,percent,Type], axis=1, keys=['Total','Percent','Type'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FamilySize\n",
    "增加家庭成员人数字段"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data['FamilySize'] = all_data['SibSp'] + all_data['Parch'] + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "删掉不用的字段"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data.drop(['PassengerId','Name','SibSp','Parch','Ticket'],axis = 1,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age           float64\n",
       "Cabin           int64\n",
       "Embarked       object\n",
       "Fare          float64\n",
       "Pclass          int64\n",
       "Sex            object\n",
       "Survived      float64\n",
       "Title          object\n",
       "FamilySize      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "对数据进行必要的处理，为喂入模型做准备"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "all_data['Sex'].loc[all_data['Sex']=='male']=0\n",
    "all_data['Sex'].loc[all_data['Sex']=='female']=1\n",
    "all_data['Sex'] = all_data['Sex'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_x=all_data.drop(['Survived'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_x=pd.get_dummies(df_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age     0.452129\n",
       "Fare    4.364366\n",
       "dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "df_x[['Age','Fare']].apply(lambda x: stats.skew(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fare偏度过大，将其取对数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_x['Fare'] = np.log1p(df_x['Fare'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "将所有数据标准化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "df_x=pd.DataFrame(MinMaxScaler().fit_transform(df_x),columns=df_x.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Officer</th>\n",
       "      <th>Title_Royalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.366910</td>\n",
       "      <td>0.225363</td>\n",
       "      <td>0.477467</td>\n",
       "      <td>0.647441</td>\n",
       "      <td>0.355997</td>\n",
       "      <td>0.088388</td>\n",
       "      <td>0.206264</td>\n",
       "      <td>0.093965</td>\n",
       "      <td>0.699771</td>\n",
       "      <td>0.046600</td>\n",
       "      <td>0.200153</td>\n",
       "      <td>0.578304</td>\n",
       "      <td>0.152788</td>\n",
       "      <td>0.017571</td>\n",
       "      <td>0.004584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.168089</td>\n",
       "      <td>0.417981</td>\n",
       "      <td>0.155173</td>\n",
       "      <td>0.418918</td>\n",
       "      <td>0.478997</td>\n",
       "      <td>0.158364</td>\n",
       "      <td>0.404777</td>\n",
       "      <td>0.291891</td>\n",
       "      <td>0.458533</td>\n",
       "      <td>0.210862</td>\n",
       "      <td>0.400267</td>\n",
       "      <td>0.494019</td>\n",
       "      <td>0.359921</td>\n",
       "      <td>0.131435</td>\n",
       "      <td>0.067573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.260929</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.350202</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.348616</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.438698</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.455092</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.556696</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age        Cabin         Fare       Pclass          Sex  \\\n",
       "count  1309.000000  1309.000000  1309.000000  1309.000000  1309.000000   \n",
       "mean      0.366910     0.225363     0.477467     0.647441     0.355997   \n",
       "std       0.168089     0.417981     0.155173     0.418918     0.478997   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%       0.260929     0.000000     0.350202     0.500000     0.000000   \n",
       "50%       0.348616     0.000000     0.438698     1.000000     0.000000   \n",
       "75%       0.455092     0.000000     0.556696     1.000000     1.000000   \n",
       "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "        FamilySize   Embarked_C   Embarked_Q   Embarked_S  Title_Master  \\\n",
       "count  1309.000000  1309.000000  1309.000000  1309.000000   1309.000000   \n",
       "mean      0.088388     0.206264     0.093965     0.699771      0.046600   \n",
       "std       0.158364     0.404777     0.291891     0.458533      0.210862   \n",
       "min       0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "25%       0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "50%       0.000000     0.000000     0.000000     1.000000      0.000000   \n",
       "75%       0.100000     0.000000     0.000000     1.000000      0.000000   \n",
       "max       1.000000     1.000000     1.000000     1.000000      1.000000   \n",
       "\n",
       "        Title_Miss     Title_Mr    Title_Mrs  Title_Officer  Title_Royalty  \n",
       "count  1309.000000  1309.000000  1309.000000    1309.000000    1309.000000  \n",
       "mean      0.200153     0.578304     0.152788       0.017571       0.004584  \n",
       "std       0.400267     0.494019     0.359921       0.131435       0.067573  \n",
       "min       0.000000     0.000000     0.000000       0.000000       0.000000  \n",
       "25%       0.000000     0.000000     0.000000       0.000000       0.000000  \n",
       "50%       0.000000     1.000000     0.000000       0.000000       0.000000  \n",
       "75%       0.000000     1.000000     0.000000       0.000000       0.000000  \n",
       "max       1.000000     1.000000     1.000000       1.000000       1.000000  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_x.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "数据切分"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x_train = df_x[:train.shape[0]]\n",
    "x_test = df_x[train.shape[0]:]\n",
    "y_train = train['Survived']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. baseline建模及评估<a id='baseline建模及评估'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "本次准备尝试LR,SVM,KNN,RF,Xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import learning_curve\n",
    "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n",
    "                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n",
    "    plt.figure()\n",
    "    plt.title(title)\n",
    "    if ylim is not None:\n",
    "        plt.ylim(*ylim)\n",
    "    plt.xlabel(\"Training examples\")\n",
    "    plt.ylabel(\"Score\")\n",
    "    train_sizes, train_scores, test_scores = learning_curve(\n",
    "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "    plt.grid(True)\n",
    "\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
    "                     color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
    "             label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
    "             label=\"Cross-validation score\")\n",
    "\n",
    "    plt.legend(loc=\"best\")\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score\n",
    "import time\n",
    "def kfold_plot(train, ytrain, model):\n",
    "    kf = StratifiedKFold(n_splits=5)\n",
    "    accuracy_scores = []\n",
    "    exe_time = []\n",
    " \n",
    "    i=0\n",
    "    for train_index, test_index in kf.split(train, ytrain):\n",
    "        X_train, X_test = train.iloc[train_index], train.iloc[test_index]\n",
    "        y_train, y_test = ytrain.iloc[train_index], ytrain.iloc[test_index]\n",
    "        begin_t = time.time()\n",
    "        model.fit(X_train, y_train)\n",
    "        predictions = model.predict(X_test)\n",
    "        end_t = time.time()\n",
    "        exe_time.append(round(end_t-begin_t, 3))      \n",
    "        \n",
    "        accuracy_scores.append(accuracy_score(y_test.astype(float), predictions)) \n",
    "        \n",
    "        i += 1\n",
    "\n",
    "    print ('mean accuracy_scores: ', np.mean(accuracy_scores))\n",
    "    print ('mean model process time: ', np.mean(exe_time), 's')\n",
    "    plot_learning_curve(model, \"Learning Curves\",train, ytrain, ylim=(0.1, 1.01), n_jobs=1,cv=10)\n",
    "    plt.show()\n",
    "    return np.mean(accuracy_scores),np.mean(exe_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mean_accuracy = {}\n",
    "mean_time = {}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.827184216396\n",
      "mean model process time:  0.0028 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nIOR0tdjYWAoKCircht1ujdgfbTKpJCbGnHzBaqCm1Cp1hpfUGX41pdZI1XlWr6C12+0UFhYG7hcW\nFlZ6rnIk324lJsaQm1sUse2HU02pVeoML6kz/GpKrWda51ntxqlM69atyczMJDc3F6fTyffff3/O\nvqFICCGM5Ky07NeuXUtRURGpqamkpaUxdOhQdF2nX79+NGzY8GyUIIQQhlZtr6CN5Nk4NeXtHNSc\nWqXO8JI6w6+m1ForunGEEEKcGxL2QghhADKevRC1iHXVCmKnT0XNzkJr0pTCCZNx9LvrtLf3wgvz\n2LHjV44d+4uSkhLOO68JiYlJZGTMOum6O3fu4JtvvuK++x6ocP6mTd9y6NCf9OrV97TrE1UnYS9E\nLWFdtYK4Jx5F8X0PrylrP3FPPApw2oH/6KOPA/DRR2vJzNzL8OGPVnndtm3Pp23b8yud37XrFadV\nkzg9EvZC1BDW5UuJfvftSudHbd2C4gi9PkUpLiZu1MNEL3mzwnVK7v5vHKkDT7mWH374npdffgGb\nzUrPnt4vY1+9+j3cbjeKojBjxlx27/6DNWtWMXXqMwwY0IeLL76EffsyqVOnDhkZs/m///uIzMy9\n9O7djylTJtCgQUOys7O48MIOjBkzjtzcXKZOnYDL5aJZsxb88MMWli//IFCDw+Fg0qQ0CgsLKSkp\n4cEHR3DZZV1Zt+4D3n9/FZrmoVu3qxk69CE++eRjVq1ajqqaaNasOU8+OYFPPvmY//mfD9E0jaFD\nHyIvL4/ly99BVVU6dux0Sge2mkDCXojawlHJhYiVTT9DTqeT9957j9zcIt5663XmzHmO6OhoZs+e\nznff/Yt69eoHlj1wIJvnnnuZhg0bMXz4/fz6639CtrV//z7mzXsRqzWau+7qxV9/HeWddxbTvfs1\n9O17J1u2bGLLlk0h62RnZ3H8+HH+8Y/nycnJYf/+THJyjvH224tZvPhdLBYrCxa8yJ9/HuS11xay\nevX7uFwKzz//D9asWYXNFkNcXBwzZ/6TvLzjjBjxd159dQnR0dE8/XQ6W7Zs4m9/6xqRx+5ckLAX\nooZwpA48YSu8TkoHTFn7y03Xmjbj+Acfhb2e5s1bBG4nJdUhI2MyMTExZGbu5aKLOoYsm5CQSMOG\njQBo0KAhTmfoAahJk6bExMQCULduPZxOJ3v37uWWW24DoGPH8hdfJie3plevvkyZMgG3203//gPI\nzs6mVavWWK3RAAwf/ii//voLrVolExsbS25uEZdcksKWLZu48MKLAn9DVtZ+cnNzGDNmJOD9TuTs\n7Cz+9rdwPFLVg4S9ELVE4YTJIX32ALrNRuGEyRHZn6oqgHfMq9deW8iqVesAePzxhyl7+Y6iKCfc\nVkXzk5Nbs337v2nb9nx++eXf5ebv2vUHRUWFzJnzHEePHmX48PtZtGgx+/btxel0YrFYmDjxSR55\n5HH27t1DUZH33PVt236gWbPmvv16T0hs3LgJDRo05Nln52M2m/noo7W0bdvuFB+R6k3CXohawv8h\nbDjPxqmK2NhYLr74EoYNuw+TyUxcXBxHjx6hcePzzmi7//3f9/L005P47LNPqVevPmZzaFw1bdqM\nN95YxGefrQ/0uyclJXHPPUN45JEHURSFK6/sTqNGjbn//oe4//770DSdpk2bMWzYI2zY8ElgW0lJ\nSaSm3sMjjzyIx+OhcePzuO66HmdUf3UjV9BWczWlVqkzvKRO+Ne/viExMYn27TuwZctmlix5g+ef\nX3Da2zPKY1rZFbTSshdCVEuNGzfhmWemYTKZ0DSNUaPGnOuSajQJeyFEtdSyZSsWLnzjXJdRa8hw\nCUIIYQAS9kIIYQAS9kIIYQAS9kIIYQAS9kLUIqt+X0HKWx1oOD+BlLc6sOr3FWe8zd27dzF27GM8\n+uhD/P3vg3nttYXlLpo6l+644yYAnnvuH/z5558h8zIz9/LIIw+ecP1Vq5YD3lE416xZHZkiqwE5\nG0eIWmLV7yt44otHKXZ7r6DNKtjPE194B/Pq1+70LqzKz89nypTxTJ8+h2bNmuPxeEhPT2PNmlX0\n7t0/bLWHw2OPjT6t9RYvfp1+/VJr/SicEvZC1BDLf1vKu79VPurl1kNbcHhCx5wpdhcz6vOHWfKf\nNytc5+4L/pvUCyofb+ebb74kJeVvgeEFTCYTEydOJSoqih9++J5XXnkJRTFxxx19qFu3LosWvYzV\naiU+PoFx4ybhdruZPHkcmqbhdDoZO3YczZu3rHC0Sj+328099/TnzTffxWazsXTpEkwmlb/97b94\n4YV5aJpGbm4uY8akcfHFlwTWe+SRBxk7djyxsXamTZuIruvUqVM3MP+TT/6PJUveDhmZc82aVeTl\nHWfu3JlceGGHwDDO7777Nhs2fILJZOKSSzozYsRIXnttIQcPHiAnJ4dDhw7y6KNP8F//dXlg+6c6\nCueKFe8SFRVVbhROVVUYMuTvYR+FU8JeiFqibNCfbHpVHD16hPPOaxIyLSYmpnTbDievv/4Ouq5z\n1129mD//VerXb8CKFe+yePFrpKR0IT4+gfT0qezZs4fi4uIKR6sMZjabufrq6/jiiw3ccsttrF//\nv8yb9xLff/8djzzyOK1bt+GTT/6Xjz5aGxL2fm+99Ro33HATd9zRhw0bPuH991cCsHfv3nIjcw4Z\nMpRVq1YwZkwaH320FvCOufPZZ5+yYMHrmEwmJkx4ko0bvwYgKsrCP/7xPFu2bOLdd98JCftTHYXz\njTfeISYmttwonAsWLGDfvoNhH4VTwl6IGiL1goEnbIWnvNWBrILyo142tTfjg96nN+plw4aN+f33\n30KmHTiQzeHDhwBo1aolALm5ucTExFK/fgMAOnXqzMKF8xkxYiRZWftISxuN2WxmyJChFY5W+dNP\n23jllfkADBw4mNtv783cuTNp0aIlzZq1ICEhkXr1GvDmm69itVopKioiNja2wpr379/H7bf3AeDi\niy8JhH2dOnVPODKnX2bmXjp0uDgwFs8ll3Riz55dALRr5/0ylgYNGpUbufNUR+H0j/J5tkbhlA9o\nhaglJnSdjM1sC5lmM9uY0PX0R7288spubN78LdnZWYC3i+WFF+axe7c3/PyjRiYmJlJUVMjRo0eB\n0pElf/xxK3Xr1mPevJcYMmQoCxe+FDJa5YQJU3n22TlcckknXnxxES++uIgrrujm6zbSWbp0CXfc\n4Q3u556bw9ChDzFx4lRat25T6YfELVsm88svPwMExs0vKChg/vwXmTp1Bk89NRGr1RpYv+x2WrRo\nyX/+sx23242u62zb9iPNmrXw/b2VP1YV/V1NmjQNjMIJMHHikyQl1WHvXu+7nODHKvjxDB6F88UX\nF9G/fyodOlxclX9ZpaRlL0Qt4f8QdvqmqWQXZNHE3pQJXSef9oezALGxdiZMmMqsWRlomkZRURFX\nXtmdPn368+OPWwPLKYrCk09OYMKEsaiqQlxcPOPHT0FRYPLk8bz//ko8Hg/33fdAhaNVVuTWW3vx\n2msLSEnpAsCNN95CevpTxMXFU79+A44fz61wvSFDhjJt2kTWr/8k0AUVGxtL586dy43MCd5hGaZN\nS6dLl8sAaN26DddddwPDhw9F13U6dryEq666hj/++P2Ej9WpjsI5cuRDKIp61kbhlFEvq7maUqvU\n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\nRyJkY6JicNaqE46FqBrDXFQVHJBxcdHk5RWf9BPysrdP9kEOUGmrNTDPv3yZLgKgXOtVQSExIYb8\nPEdIC1YJCuHgcA0EaXBwlglSb11VCOBTDNozfet5tkid4VVT6oSaU2uN6sY510yqmUJnQblPx8Eb\nqB49CrfmCXQHABV2CfiXL9dahQpbrBXePsGHPf7bJ5IYH0NuDXg7L4So3mpd2KuKSvN47wVclQVq\nYmIMuUiACiGMo9aFPdT+qzmFEOJUSSoKIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQB\nSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgL\nIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQB\nSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgLIYQBSNgL\nIYQBSNgLIYQBSNgLIYQBmCOxUU3TmDJlCjt27MBisZCRkUGLFi0C83/++WdmzpyJruvUr1+fOXPm\nYLVaI1GKEEIIItSyX79+PU6nk+XLlzN69GhmzpwZmKfrOunp6TzzzDO8++67dO/enezs7EiUIYQQ\nwiciLfutW7fSvXt3ADp16sT27dsD8/bs2UNiYiJvvvkmO3fu5OqrryY5OTkSZQghhPCpUtgXFBTw\nyiuvcPjwYa699lrOP//8kG6Zipa32+2B+yaTCbfbjdlsJicnhx9//JFJkybRvHlzhg0bxkUXXcTl\nl18esg273YrZbDrNP+vETCaVxMSYiGw73GpKrVJneEmd4VdTao1UnVUK+/Hjx3PVVVexZcsW6tWr\nx4QJE3j77bcrXd5ut1NYWBi4r2kaZrN3V4mJibRo0YLWrVsD0L17d7Zv314u7AsKHKf8x1RVYmIM\nublFEdt+ONWUWqXO8JI6w6+m1HqmddavH1fh9Cr12efm5tK/f3/MZjMpKSlomnbC5VNSUvjqq68A\n2LZtG+3atQvMa9asGYWFhWRmZgLw/fff07Zt2yr9EUIIIU5Plfvsd+3aBcCff/6JyXTi7pUePXqw\nceNGBgwYgK7rzJgxg7Vr11JUVERqairTp09n9OjR6LpO586dueaaa87ojxBCCHFiiq7r+skW+v33\n30lPT2fXrl0kJyczefJkOnToENHCjhzJj9i2a8rbOag5tUqd4SV1hl9NqTVS3ThVatl//fXXLF++\n/LR3LoQQ4tyqUp/9l19+icfjiXQtQgghIqRKLfucnBy6d+9O06ZNURQFRVFYtmxZpGsTQggRJlUK\n+wULFkS6DiGEEBFUpbA3mUzMmDGDXbt20bJlS8aNGxfpuoQQQoRRlfrsJ06cSK9evXj33Xfp06cP\nEyZMiHRdQgghwqhKYe9wOLj++uuJj4/nhhtuwO12R7ouIYQQYVSlsPd4POzYsQOAHTt2oChKRIsS\nQggRXlXqs584cSLjx4/nyJEjNGjQgKeffjrSdQkhhAijKoV9mzZtePrpp7nwwgtZv349bdq0iXRd\nQgghwqhK3Thjxozh119/Bbzj0aelpUW0KCGEEOFVpbA/dOgQ/fr1A+CBBx7g8OHDES1KCCFEeFUp\n7BVFYc+ePQBkZmaedIhjIYQQ1UuVv7zk8ccfZ9euXbRt25Zp06ZFui4hhBBhdMKW/S+//ELv3r1p\n3749I0aMCHwD1aFDh85WfUIIIcLghGE/e/ZsZs6cSVRUFM8++yyvvvoqq1at4pVXXjlb9QkhhAiD\nE3bjaJrGBRdcwKFDhyguLg58YYmqVqmrXwghRDVxwtT2f0n4119/HfhCcJfLFfJl4kIIIaq/E7bs\nL7/8cgYMGMCff/7Jyy+/zL59+5g2bRo9e/Y8W/UJIYQIgxOG/YMPPsj111+P3W6nYcOG7Nu3j9TU\nVHr06HG26hNCCBEGJz31snXr1oHbzZs3p3nz5hEtSAghRPjJJ61CCGEAEvZCCGEAEvZCCGEAEvZC\nCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEA\nEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEvZCCGEAEQl7TdOYNGkSqampDBo0iMzMzAqXS09PZ+7c\nuZEoQQghRJCIhP369etxOp0sX76c0aNHM3PmzHLLLFu2jN9//z0SuxdCCFFGRMJ+69atdO/eHYBO\nnTqxffv2kPk//PADP/30E6mpqZHYvRBCiDIiEvYFBQXY7fbAfZPJhNvtBuDw4cO89NJLTJo0KRK7\nFkIIUQFzJDZqt9spLCwM3Nc0DbPZu6v//d//JScnhwcffJAjR45QUlJCcnIyffv2LbMNK2azKRLl\nYTKpJCbGRGTb4VZTapU6w0vqDL+aUmuk6oxI2KekpPD555/Ts2dPtm3bRrt27QLzBg8ezODBgwFY\nvXo1u3fvLhf0AAUFjkiUBkBiYgy5uUUR23441ZRapc7wkjrDr6bUeqZ11q8fV+H0iIR9jx492Lhx\nIwMGDEDXdWbMmMHatWspKiqSfnohhDgHIhL2qqoybdq0kGmtW7cut1xFLXohhBDhJxdVCSGEAUjY\nCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGE\nAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjY\nCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGE\nAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjYCyGEAUjY\nCyGEAZgjsVFN05gyZQo7duzAYrGQkZFBixYtAvPXrVvH4sWLMZlMtGvXjilTpqCqctwRQohIiUjC\nrl+/HqfTyfLlyxk9ejQzZ84MzCspKeHZZ5/lrbfeYtmyZRQUFPD5559HogwhhBA+EQn7rVu30r17\ndwA6derE9u3bA/MsFgvLli3DZrMB4Ha7sVqtkShDCCGET0S6cQoKCrDb7YH7JpMJt9uN2WxGVVXq\n1asHwJIlSygqKuLKK68stw273YrZbIpEeZhMKomJMRHZdrjVlFqlzvCSOsOvptQaqTojEvZ2u53C\nwsLAfU3TMJvNIffnzJnDnj17eOGFF1AUpdw2CgockSgNgMTEGHJziyK2/XCqKbVKneEldYZfTan1\nTOusXz+uwukR6cZJSUnhq6++AmDbtm20a9cuZP6kSZNwOBzMnz8/0J0jhBAiciLSsu/RowcbN25k\nwIAB6LrOjBkzWLt2LUVFRVx00UWsXLmSLl26MGTIEAAGDx5Mjx49IlGKEEIIIhT2qqoybdq0kGmt\nW7cO3P7tt98isVshhBCVkJPbhRDCACTshRDCACTshRDCACTshRDCACTshRDCACTshRDCACTshRDC\nACTshRDCACTshRDCACTshRDCACTshRDCACTshRDCACTshRDCACTshRDCACTshRDCACTshRDCACTs\nhRDCACTshRDCACTshRDCABRd1/VzXYQQQojIkpa9EEIYgIS9EEIYgIS9EEIYgPlcFxBJP/30E3Pn\nzmXJkiVkZmaSlpaGoii0bduWyZMno6oqK1asYNmyZZjNZoYPH86111571upzuVyMHz+e7OxsnE4n\nw4cPp02bNtWuTgCPx8PEiRPZs2cPiqIwdepUrFZrtawV4K+//qJv3768/vrrmM3mallnnz59sNvt\nADRt2pRhw4ZVyzoXLlzIZ599hsvl4u677+ayyy6rlnWuXr2a999/HwCHw8Gvv/7K0qVLmTFjRrWq\n1eVykZaWRnZ2Nqqq8vTTT5+d56heSy1atEi/7bbb9DvvvFPXdV1/6KGH9E2bNum6ruvp6en6J598\noh8+fFi/7bbbdIfDoefl5QVuny0rV67UMzIydF3X9ZycHP3qq6+ulnXquq5/+umnelpamq7rur5p\n0yZ92LBh1bZWp9OpjxgxQr/xxhv1P/74o1rWWVJSovfq1StkWnWsc9OmTfpDDz2kezwevaCgQH/+\n+eerZZ1lTZkyRV+2bFm1rPXTTz/VR44cqeu6rn/zzTf6I488clbqrLXdOM2bN+eFF14I3P/ll1+4\n7LLLALjqqqv49ttv+fnnn+ncuTMWi4W4uDiaN2/Ob7/9dtZqvPnmm3nssccA0HUdk8lULesEuOGG\nG3j66acBOHDgAPHx8dW21lmzZjFgwAAaNGgAVM///W+//UZxcTH3338/gwcPZtu2bdWyzm+++YZ2\n7drx8MMPM2zYMK655ppqWWewf//73/zxxx+kpqZWy1pbtWqFx+NB0zQKCgowm81npc5a241z0003\nkZWVFbiv6zqKogAQGxtLfn4+BQUFxMXFBZaJjY2loKDgrNUYGxsLQEFBASNHjmTUqFHMmjWr2tXp\nZzabeeqpp/j00095/vnn2bhxY7WrdfXq1dSpU4fu3buzaNEioHr+76Ojoxk6dCh33nkne/fu5YEH\nHqiWdebk5HDgwAEWLFhAVlYWw4cPr5Z1Blu4cCEPP/wwUD3/9zExMWRnZ3PLLbeQk5PDggUL2LJl\nS8TrrLVhX5aqlr6JKSwsJD4+HrvdTmFhYcj04Af3bDh48CAPP/wwAwcO5Pbbb2fOnDnVsk6/WbNm\nMWbMGO666y4cDkdITdWh1lWrVqEoCv/617/49ddfeeqppzh27Fi1q7NVq1a0aNECRVFo1aoViYmJ\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x118ddd6a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr_model = LogisticRegression(C=100)\n",
    "mean_accuracy['lr'],mean_time['lr'] = kfold_plot(x_train, y_train, lr_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.823832261089\n",
      "mean model process time:  0.02 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1192e9278>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svc_model = SVC(C=20)\n",
    "mean_accuracy['svc'],mean_time['svc'] = kfold_plot(x_train, y_train, svc_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.805873209572\n",
      "mean model process time:  0.0078 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nzvbt22nfvv1pq+nw4cPcd999jB49mn79+tXYOgHee+89Fi1aBEBCQgKKonDBBRfUuFrffvtt3nrr\nLZYuXcp5553H7NmzufLKK2tcne+++y6zZs0CICcnB4fDweWXX17j6rz44ov517/+hWEY5OTkUFRU\nxKWXXlrj6gzavHkzl156aeh+Tfx7Sk5ODoV2nTp18Hq9p6XOs/oK2uzsbB5//HFWrlzJzp07mTRp\nEh6Ph9atW5OVlYXJZGLlypWsWLECwzB44IEHuOGGG05bfVlZWXz00Ue0bt06NG/ChAlkZWXVqDoB\nCgsLGTduHIcPH8br9XL//ffTpk2bGveahhs4cCBTp05FVdUaV6fb7WbcuHHs378fRVEYNWoUqamp\nNa5OgDlz5rBp0yYMw+Cxxx6jadOmNbJOgFdeeQVN07jnnnsAauTfvdPpZPz48Rw6dAiPx8OgQYO4\n4IILol7nWR32Qggh/GKmG0cIIWKZhL0QQsQACXshhIgBEvZCCBEDJOyFECIGSNiLGmXWrFkMHDiQ\nG2+8kauvvpqBAwcyYsSIKj32119/5YUXXqhw+VdffcWKFSuqq9TTJjs7mzvuuONMlyFqOTn1UtRI\nq1evZseOHYwaNepMl3LGhV8vIsTJipnhEkTttmnTJubNm4fZbOaOO+4gPj6et99+G6/Xi6IovPDC\nC/zxxx8sX76c+fPn89e//pWMjAx27txJeno6zz//PO+//z47duygf//+jBw5koYNG7J3714uvPBC\npk2bxtGjRxk1ahRut5tWrVqxceNGPvnkk4g6li5dyrp161AUhR49ejBo0CBGjBjBZZddRs+ePbnz\nzjvJysrCbDYza9YsfD4feXl5TJ06lYyMDLp3707nzp3ZtWsXl156KXa7nZ9//plWrVoxd+5cxo4d\ni2EYHDhwgMLCQmbPno3FYgnt/9tvv2X+/PmYTCaaNWvG9OnTyc7OZty4cWiahq7r/P3vf6dRo0an\n+1ckajgJe1FruFwu/vGPfwCwcOFCFi9eTEJCApMnT+brr7+mQYMGoXX37t3LkiVLaNSoEf379+c/\n//lPxLZ27drFq6++SkJCAtdffz2HDh3i5Zdf5rrrruOuu+5iw4YNbNiwIeIxf/75Jx9++CHLli0D\n4N577+WKK64gKyuLO++8kw0bNpCZmUmHDh348MMPGTNmDOeccw5r165l9erVZGRksG/fPpYsWUK9\nevW45JJL+Mc//sGkSZO47rrrKCgoAKBZs2bMnj2bL7/8krlz5zJx4kTAP6jXpEmTWLZsGenp6Tzz\nzDOsWbMGj8dDx44dGT16NN999x12u13CXpQhYS9qjVatWoWm09PTGTNmDElJSezYsYNOnTpFrJua\nmhoKvEaNGkUM2gb+IbCDXxxSr149XC4X27dvp3fv3gB06dKlzP5///139u/fH7oU/9ixY+zevZvW\nrVtz22238frrrzNv3jwA6tevz4IFC4iPj8fpdIb2lZKSQuPGjQH/6Idt27YFwGazhWoMDuLVuXNn\nZs6cGdr/0aNHyc3N5dFHHwWguLiYyy67jOHDh/Pyyy/zt7/9DZvNxmOPPXZCr6uIDfIBrag1giMY\n2u12nnvuOebPn09WVhYWi4XSHz0Fh4utSHnL27dvz48//gjAli1byixv3bo1bdu25c0332Tp0qX0\n6dOHc845h71797Ju3ToGDhzI7NmzAZgxYwYjRoxg9uzZtG/fPlTf8eoCQqNf/vDDD7Rr1y40PzU1\nlYYNG7JgwQKWLl3K0KFD6dq1K59++ikXX3wxS5Ys4cYbb+SVV1457j5E7JGWvah1rFYrGRkZZGZm\nomkaycnJ5Obm0rRp01Pa7v33388TTzzBRx99RP369dG0yD+Pc889l0svvZQBAwbgdrvp2LEjdevW\nZeDAgUyaNIkuXbpwzz338Omnn3LbbbfxyCOPkJycTMOGDcnLy6tyHV999RWffvopuq7z1FNPhear\nqsqECRMYMmQIhmGQlJTEnDlzcDqdjBkzhpdeegld1xk3btwpvQ7i7CRn4wgR8OWXX5KamkrHjh35\n5ptvWLhwIW+++eZprWHs2LH06NGDK6+88rTuV5z9pGUvREDTpk0ZP348JpMJXdeZMGHCmS5JiGoj\nLXshhIgB8gGtEELEAAl7IYSIARL2QggRAyTshRAiBkjYCyFEDJCwF0KIGPD/AVtiDiGBY6w9AAAA\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119472048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn_model = KNeighborsClassifier(n_neighbors=10)\n",
    "mean_accuracy['knn'],mean_time['knn'] = kfold_plot(x_train, y_train, knn_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.826035299829\n",
      "mean model process time:  0.0182 s\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXsAAAEPCAYAAACjjWTcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xl8E+X69/HPTNKmSdNS9n0riyKKUNEHFNyAo+LCqgU9\ngMoRARUXQMq+WJBNUUAEXBFFQEERfnqOgjseEBdUPIrKUig70kLbtM0y8/yRpUmTQoGktM31Vl5N\nZiaTK2nzvWfumbmj6LquI4QQolJTL3QBQgghIk/CXgghooCEvRBCRAEJeyGEiAIS9kIIEQUk7IUQ\nIgpI2IsLLjMzk3bt2l2Q537++ed5//33w7a+wsJCnnvuOXr27EmPHj24/fbbWbp0KXKGs7jQjBe6\nACEupEcffTRs69J1neHDh9O0aVNWrVqFyWQiKyuLBx98EJvNxmOPPRa25xLibEnYi3LNbrczd+5c\ntm3bhsvl4pJLLmHChAlYrVY+++wzlixZgt1u58SJE/Ts2ZPHHnuMrVu3Mn36dCwWCzabjdGjR/PC\nCy/QsGFD/vzzT+x2O5MmTaJDhw6kpaXRokULBg8ezGWXXcaQIUPYvHkzR48eZeDAgdx77724XC5m\nz57Np59+SkJCAm3atGHXrl0sX748oNZt27axe/duli5disFgAKBq1arMnj2bAwcOADBgwADuuece\nbr755qD7l156KV26dOH333+nb9++fPfddyxZsgSAXbt2ce+99/L555+zd+9epk+fTnZ2Ni6XiwED\nBtC3b1/y8vIYO3YsGRkZqKpK69atmTZtGqoqO/BCwl6Uc97gXLt2LYqi8OyzzzJ37lwmT57Mq6++\nysyZM2nSpAlHjhzhhhtuYODAgQD8+eefbNy4kfr167N161Z+/vlnJk+eTKtWrXj11VdZuHAhHTp0\nCHguu91O1apVWblyJTt27KB///7079+f9957j19//ZUNGzagKArDhg0LWeuOHTto06aNL+i9mjRp\nQpMmTc74Wh0OBzfccAPPP/88ubm5LFmyhGPHjlGzZk3Wrl1L79690XWdESNGMHv2bFq3bk1OTg6p\nqak0b96cvXv3kpeXx7p163C5XEyePJn9+/fTuHHjc3vzRaUiYS/Ktc8//5ycnBy++eYbwB2I1atX\nR1EUFi9ezOeff86GDRvYtWsXuq6Tn58PQN26dalfv75vPfXq1aNVq1YAXHLJJbz33nshn69Lly4A\n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\nskXXdV2fOHGi/vHHH+tHjx7Vb7vtNr2wsFA/deqU73ZZeffdd/X09HRd13U9KytLv+6668plnbqu\n65988omelpam67qub9myRR86dGi5rdVut+vDhw/X//GPf+h//fVXuayzoKBA79GjR8C08ljnli1b\n9AcffFB3uVx6bm6uPn/+/HJZZ3FTpkzRV65cWS5r/eSTT/QRI0bouq7rX3/9tf7www+XSZ2Vthun\nUaNGLFiwwHf/119/5aqrrgLg2muv5ZtvvuHnn3+mXbt2xMbGkpCQQKNGjfj999/LrMabb76ZRx99\nFABd1zEYDOWyToCuXbvy1FNPAXDw4EESExPLba2zZs2iX79+1KpVCyifv/vff/+d/Px87r//fgYO\nHMj27dvLZZ1ff/01LVu25KGHHmLo0KFcf/315bJOf7/88gt//fUXqamp5bLWpk2b4nK50DSN3Nxc\njEZjmdRZabtxbrrpJjIzM333dV1HURQA4uPjycnJITc3l4SEBN8y8fHx5ObmllmN8fHxAOTm5jJi\nxAgee+wxZs2aVe7q9DIajYwZM4ZPPvmE+fPns3nz5nJX69q1a6lWrRqdO3dm6dKlQPn83cfFxTF4\n8GDuvPNO9u7dywMPPFAu68zKyuLgwYMsXryYzMxMhg0bVi7r9LdkyRIeeughoHz+7i0WCwcOHOCW\nW24hKyuLxYsXs23btojXWWnDvjhVLdqJycvLIzExEavVSl5eXsB0/ze3LBw6dIiHHnqIu+++m9tv\nv505c+aUyzq9Zs2axahRo7jrrrsoLCwMqKk81LpmzRoUReG///0vv/32G2PGjOHEiRPlrs6mTZvS\nuHFjFEWhadOmJCUl8euvv5a7OpOSkkhOTiY2Npbk5GRMJhOHDx8ud3V6nTp1ij179tChQwegfH7u\nX3/9dTp16sTIkSM5dOgQgwYNwuFwRLzOStuNU9wll1zC1q1bAfjyyy9p3749bdq04fvvv6ewsJCc\nnBx27dpFy5Yty6ym48ePc//99zN69Gj69u1bbusEeP/991myZAkAZrMZRVG49NJLy12tb731Fm++\n+SbLly+nVatWzJo1i2uvvbbc1fnuu+8yc+ZMAI4cOUJubi7XXHNNuavziiuu4KuvvkLXdY4cOUJ+\nfj4dO3Ysd3V6bdu2jY4dO/rul8fPU2Jioi+0q1SpgtPpLJM6K/UVtJmZmTzxxBOsXr2aPXv2MHHi\n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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1197de1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_model = RandomForestClassifier(max_depth = 4,random_state=42)\n",
    "mean_accuracy['rf'],mean_time['rf'] = kfold_plot(x_train, y_train, rf_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jinxinzhe/anaconda3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.835036830796\n",
      "mean model process time:  0.011 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nLx2yTbRzAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119a066d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost.sklearn import XGBClassifier\n",
    "xgb_model = XGBClassifier(learning_rate =0.1, n_estimators=20, max_depth=3,\\\n",
    "        min_child_weight=1, gamma=0,subsample=0.9,colsample_bytree=0.9,\\\n",
    "        objective= 'binary:logistic',scale_pos_weight=1, seed=27)\n",
    "mean_accuracy['xgb'],mean_time['xgb'] = kfold_plot(x_train, y_train, xgb_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 模型对比"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>xgb</td>\n",
       "      <td>0.835037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>lr</td>\n",
       "      <td>0.827184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>rf</td>\n",
       "      <td>0.826035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>svc</td>\n",
       "      <td>0.823832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>knn</td>\n",
       "      <td>0.805873</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  model  accuracy\n",
       "4   xgb  0.835037\n",
       "0    lr  0.827184\n",
       "3    rf  0.826035\n",
       "1   svc  0.823832\n",
       "2   knn  0.805873"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_eval={\"model\" : list(mean_accuracy.keys()),\n",
    "                  \"accuracy\" : list(mean_accuracy.values())}\n",
    "df_eval=pd.DataFrame(df_eval,columns=[\"model\",\"accuracy\"])\n",
    "df_eval.sort_values(\"accuracy\",ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1199fbc18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "ax = sns.barplot(x=\"model\", y=\"accuracy\", data=df_eval.sort_values(\"accuracy\",ascending=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "可以看到，模型之间并没有很大的差距；效果最好的是xgboost，knn的效果相对较差"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. 模型融合及评估<a id='模型融合及评估'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "排除分数相对较低的knn，将模型stack一下"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy_scores:  0.836147872162\n",
      "mean model process time:  0.0566 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nsG/fvoir0+/o0aNs27aNSy65BIjM9/3rr7/OFVdcwdChQ9m7dy933XUXbrc77HWetd04ZZ133nl8\n++23AHz11Vd07NiRdu3asWHDBpxOJ/n5+WzZsoXWrVuftpoOHTrEvffey/Dhw+nVq1fE1gnw/vvv\nM3/+fADi4uJQFIXzzz8/4mp96623ePPNN1m0aBFt2rRh6tSpXHnllRFX57vvvsuUKVMA2L9/PwUF\nBVx++eURV+dFF13Ev/71LwzDYP/+/RQXF3PppZdGXJ1+69ev59JLL7VuR+L7KTk52QrtlJQUPB7P\naanzrP4GbXZ2No8//jjLli1j27ZtjB07FrfbTXp6OllZWWiaxrJly1i6dCmGYfDAAw9www03nLb6\nsrKy+Oijj0hPT7emjR49mqysrIiqE6CoqIiRI0dy6NAhPB4P9913Hy1atIi4xzRQv379mDBhAqqq\nRlydLpeLkSNHsmfPHhRFYdiwYdSoUSPi6gSYNm0a3377LYZh8Nhjj9GoUaOIrBPglVdewWazcffd\ndwNE5Pu+sLCQUaNGcfDgQdxuN/379+f8888Pe51nddgLIYQwRU03jhBCRDMJeyGEiAIS9kIIEQUk\n7IUQIgpI2AshRBSQsBcRZcqUKfTr148bb7yRq6++mn79+jF48OAqrfvrr7/y4osvVjr/q6++YunS\npaEq9bTJzs7mjjvuONNliGpOTr0UEWnFihVs3bqVYcOGnelSzrjA74sIcbKiZrgEUb19++23zJgx\ng5iYGO644w5iY2N566238Hg8KIrCiy++yB9//MGSJUuYOXMmf/3rX8nIyGDbtm3UqlWL2bNns3Ll\nSrZu3Urv3r0ZOnQo9erVY9euXVxwwQU89dRTHDlyhGHDhuFyuWjevDnr1q3jk08+Capj0aJFrF69\nGkVR6NKlC/3792fw4MFcdtlldO3alb59+5KVlUVMTAxTpkzB6/WSk5PDhAkTyMjIoHPnznTo0IHt\n27dz6aWXkp+fz88//0zz5s2ZPn06I0aMwDAM9u7dS1FREVOnTsXhcFj3/9133zFz5kw0TaNx48ZM\nnDiR7OxsRo4cic1mQ9d1nn32WerXr3+6nyIR4STsRbXhdDp55513AJg3bx4LFiwgLi6OcePG8fXX\nX1O3bl1r2V27drFw4ULq169P7969+c9//hO0re3bt/Pqq68SFxfH9ddfz8GDB3n55Ze57rrruPPO\nO1m7di1r164NWufPP//kww8/ZPHixQDcc889XHHFFWRlZdG3b1/Wrl1LZmYmbdu25cMPP+TJJ5/k\nnHPOYdWqVaxYsYKMjAx2797NwoULqV27NhdffDHvvPMOY8eO5brrruPo0aMANG7cmKlTp/Lll18y\nffp0xowZA5iDeo0dO5bFixdTq1Ytnn/+ed577z3cbjft2rVj+PDhfP/99+Tn50vYi3Ik7EW10bx5\nc+t6rVq1ePLJJ0lISGDr1q20b98+aNkaNWpYgVe/fv2gQdvAHALb/8MhtWvXxul0smXLFrp37w5A\nx44dy93/77//zp49e6yv4ufl5bFjxw7S09O57bbb+Mc//sGMGTMAqFOnDnPmzCE2NpbCwkLrvlJT\nU2nQoAFgjn7YsmVLAJKSkqwa/YN4dejQgcmTJ1v3f+TIEQ4cOMCQIUMAKCkp4bLLLmPQoEG8/PLL\n/P3vfycpKYnHHnvshB5XER3kA1pRbfhHMMzPz2fWrFnMnDmTrKwsHA4HZT968g8XW5mK5rdu3Zof\nf/wRgI0bN5abn56eTsuWLXnjjTdYtGgRPXr04JxzzmHXrl2sXr2afv36MXXqVAAmTZrE4MGDmTp1\nKq1bt7bqO15dgDX65Q8//ECrVq2s6TVq1KBevXrMmTOHRYsW8eCDD3LJJZfw6aefctFFF7Fw4UJu\nvPFGXnnllePeh4g+smcvqp3ExEQyMjLIzMzEZrORnJzMgQMHaNSo0Slt97777uOJJ57go48+ok6d\nOthswW+Pc889l0svvZQ+ffrgcrlo164daWlp9OvXj7Fjx9KxY0fuvvtuPv30U2677TYeffRRkpOT\nqVevHjk5OVWu46uvvuLTTz9F13WeeeYZa7qqqowePZr7778fwzBISEhg2rRpFBYW8uSTTzJ37lx0\nXWfkyJGn9DiIs5OcjSOEz5dffkmNGjVo164d33zzDfPmzeONN944rTWMGDGCLl26cOWVV57W+xVn\nP9mzF8KnUaNGjBo1Ck3T0HWd0aNHn+mShAgZ2bMXQogoIB/QCiFEFJCwF0KIKCBhL4QQUUDCXggh\nooCEvRBCRAEJeyGEiAL/D4lHZkMcXwi1AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1194722b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mlxtend.classifier import StackingClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "sclf_model = StackingClassifier(classifiers=[lr_model, svc_model, rf_model, xgb_model],meta_classifier=LogisticRegression())\n",
    "mean_accuracy['stack'],mean_time['stack'] = kfold_plot(x_train, y_train, sclf_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>stack</td>\n",
       "      <td>0.836148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>xgb</td>\n",
       "      <td>0.835037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>lr</td>\n",
       "      <td>0.827184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>rf</td>\n",
       "      <td>0.826035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>svc</td>\n",
       "      <td>0.823832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>knn</td>\n",
       "      <td>0.805873</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   model  accuracy\n",
       "5  stack  0.836148\n",
       "4    xgb  0.835037\n",
       "0     lr  0.827184\n",
       "3     rf  0.826035\n",
       "1    svc  0.823832\n",
       "2    knn  0.805873"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_eval={\"model\" : list(mean_accuracy.keys()),\n",
    "                  \"accuracy\" : list(mean_accuracy.values())}\n",
    "df_eval=pd.DataFrame(df_eval,columns=[\"model\",\"accuracy\"])\n",
    "df_eval.sort_values(\"accuracy\",ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "stack后模型效果好了那么一丢丢。。。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. 预测及提交<a id='预测及提交'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sclf_model.fit(x_train, y_train)\n",
    "y = sclf_model.predict(x_test) \n",
    "obj = pd.Series(y,name = 'Survived')\n",
    "result = pd.concat([test['PassengerId'],obj],axis=1)\n",
    "result.to_csv('result_stack.csv',index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](titanic_score.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 7. 总结<a id='总结'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "1. 因为是Kaggle的入门练习赛,所以数据量和维度都不是很大;\n",
    "2. 除非是有非常大的把握,不然不要轻易把连续特征离散化(如这里的Age,Fare),否则很容易造成过拟合;\n",
    "3. 基于第1条总结,本次没有对模型进行gridsearch调优,也没有必要为了提升最后的一点分数花太多的精力,因为该赛题本身不具有数据挖掘问题的普遍性,但从另一方面来说,比较适合拿来练习各种工具包如pandas,numpy,matplotib,seaborns,sklearn,尝试各种算法及个人idea;\n",
    "4. xgboost在这类问题上还是非常好用的;\n",
    "5. 一般一个完整的流程,会在baseline模型完成后进行一次初步的提交试探成绩,以及进行人工误差分析;从分析结果中的到一些新的想法,进一步优化特征工程以及模型,再进行提交...是一个迭代的过程。这边因为数据集比较简少,所以省略了迭代的过程。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
